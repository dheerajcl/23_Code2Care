generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  firstName      String
  lastName       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  events         Event[]
}

model Volunteer {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  address         String?
  city            String?
  state           String?
  skills          String[]
  interests       String[]
  availability    String?
  experience      String?
  howHeard        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  eventSignups    EventSignup[]
  feedback        Feedback[]
  taskAssignments TaskAssignment[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String   @unique
  logo      String?
  mission   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admins    Admin[]
  events    Event[]
}

model Event {
  id             String        @id @default(uuid())
  title          String
  description    String?
  location       String?
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         String        @default("upcoming")
  adminId        String
  organizationId String
  admin          Admin         @relation(fields: [adminId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  signups        EventSignup[]
  feedback       Feedback[]
  tasks          Task[]
}

model Task {
  id            String           @id @default(uuid())
  title         String
  description   String?
  startTime     DateTime?
  endTime       DateTime?
  skills        String[]
  maxVolunteers Int?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  status        String           @default("open")
  eventId       String
  event         Event            @relation(fields: [eventId], references: [id])
  assignments   TaskAssignment[]
}

model EventSignup {
  id          String    @id @default(uuid())
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  volunteerId String
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  @@unique([volunteerId, eventId])
}

model TaskAssignment {
  id          String    @id @default(uuid())
  status      String    @default("assigned")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  volunteerId String
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id])
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  @@unique([volunteerId, taskId])
}

model Feedback {
  id          String    @id @default(uuid())
  rating      Int
  comments    String?
  createdAt   DateTime  @default(now())
  volunteerId String
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  @@unique([volunteerId, eventId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Newsletter {
  email      String   @id @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
}
